<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ben Dodson's Blog - Freelance iPhone Developer and WallaBee Founder</title>
    <link>https://bendodson.com/</link>
    <atom:link href="https://bendodson.com/rss.xml" rel="self" type="application/rss+xml" />
    <description>The weblog of Ben Dodson, iOS Developer and WallaBee Founder</description>
    <language>en-gb</language>
    <pubDate>Wed, 25 Jan 2017 16:41:42 +0000</pubDate>
    <lastBuildDate>Wed, 25 Jan 2017 16:41:42 +0000</lastBuildDate>

    
    <item>
      <title>Syncing Apple Music with Spotify</title>
      <link>https://bendodson.com/weblog/2017/01/25/syncing-apple-music-with-spotify/</link>
      <pubDate>Wed, 25 Jan 2017 09:30:00 +0000</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2017/01/25/syncing-apple-music-with-spotify/</guid>
      <description>&lt;p&gt;Before Apple Music launched in April 2015 I was a longtime Spotify user and subscriber. I maintained a playlist I affectionately called &lt;em&gt;&lt;a href=&quot;https://open.spotify.com/user/bendodson/playlist/0FAo3YjdmPjZSHtLMKnJMS&quot;&gt;Ben Dodson’s Definitive Hits Collection&lt;/a&gt;&lt;/em&gt; which contained nearly 45 hours of songs I thought were particularly good&lt;sup id=&quot;fnref:criteria&quot;&gt;&lt;a href=&quot;#fn:criteria&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. On most Tuesday nights, my friend and &lt;a href=&quot;http://connectingtohost.co.uk/&quot;&gt;podcast&lt;/a&gt; co-host &lt;a href=&quot;http://johnwordsworth.com/&quot;&gt;John Wordsworth&lt;/a&gt; and I play a few rounds of &lt;a href=&quot;https://kyloben.co.uk/games/rocket-league&quot;&gt;Rocket League&lt;/a&gt; and we will regularly have the Definitive Hits on whilst we play. There are two issues with this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;As I use Apple Music now, I don’t pay for a Spotify premium account and so I have to put up with adverts (which are utterly terrible).&lt;/li&gt;
  &lt;li&gt;They aren’t in sync so we might be humming (or badly singing) along to a song that the other person isn’t listening to.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now I could just recreate the playlist in Apple Music to solve the Spotify ads issue but we still wouldn’t be in sync. As we’re both developers, we decided to remedy this problem with a fairly convoluted solution…&lt;/p&gt;

&lt;p&gt;The basic idea is that John acts as the host with the playlist on Spotify (on macOS) playing into his headphones. He has written an app that checks if the track has changed and, if it has, sends the track information to my server. I then use the &lt;a href=&quot;https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/&quot;&gt;iTunes Search API&lt;/a&gt; to look up the song and find the correct identifier which is then sent to an app on my iPhone via push notification to start the song playing on Apple Music.&lt;/p&gt;

&lt;p&gt;I’ll run through each piece and go over the challenges that were encountered.&lt;/p&gt;

&lt;h3 id=&quot;retrieving-track-details-from-spotify&quot;&gt;Retrieving track details from Spotify&lt;/h3&gt;

&lt;p&gt;I hadn’t heard of it before but Apple has provided a tool called &lt;a href=&quot;https://developer.apple.com/library/content/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/scripting_bridge.html&quot;&gt;Scripting Bridge&lt;/a&gt; since macOS 10.5 which allows you to interface with AppleScript from other programming languages such as Python and Ruby. With this, John was able to write an app that polls Spotify regularly&lt;sup id=&quot;fnref:polling&quot;&gt;&lt;a href=&quot;#fn:polling&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; to see if the track has changed. If a change is detected, the title, artist name, and album name are all sent to my server so I can begin the process of matching the song on iTunes. In future, we may add more information (track number on the album, duration, etc) in order to try and match better but this is working well enough currently.&lt;/p&gt;

&lt;h3 id=&quot;finding-a-track-on-apple-music&quot;&gt;Finding a track on Apple Music&lt;/h3&gt;

&lt;p&gt;The next step is for the server to take the information that has been sent and use the &lt;a href=&quot;https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/&quot;&gt;iTunes Search API&lt;/a&gt; to try and find a match. This is fairly straightforward and a first draft would send a request like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://itunes.apple.com/search?entity=song&amp;amp;term=never+gonna+give+you+up+rick+astley&amp;amp;country=gb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately the iTunes API does not allow you to search multiple terms (i.e. &lt;code&gt;artist=rick+astley title=never+gonna+give+you+up&lt;/code&gt;) so everything has to be concatenated together which leads to an issue; sometimes the song you expect is not the one you get. For example, consider the song &lt;em&gt;She Looks So Perfect&lt;/em&gt; by “5 Seconds of Summer”; If you search for this, the first result on the iTunes API will actually be a the “Ash Demo Vocal” version of the song which is not the one we want. To resolve this, we started sending the album information (in addition to title and artist name) so I could match that manually by iterating through the results; I then only choose the first result if there isn’t a song in the list with the same title and album name.&lt;/p&gt;

&lt;p&gt;The next issue I encountered involves the &lt;a href=&quot;https://en.wikipedia.org/wiki/Romanization_of_Belarusian&quot;&gt;Romanization of Belarusian&lt;/a&gt;; the track &lt;a href=&quot;https://en.wikipedia.org/wiki/Belarus_in_the_Eurovision_Song_Contest_2013&quot;&gt;&lt;em&gt;Solayoh&lt;/em&gt;&lt;/a&gt; is rightly attributed to Alyona Lanskaya on Spotify but Apple Music uses Romanization so it becomes Alena Lanskaya. If you search &lt;code&gt;term=solayoh+alyona+lanskaya&lt;/code&gt; then you get no results. To fix this issue, if no results are returned from the iTunes API then I then do a search for the title alone and return the first result as that works in 99% of cases.&lt;/p&gt;

&lt;p&gt;The final issue on the API side revolves around remastered tracks. The song &lt;em&gt;A Horse with No Name&lt;/em&gt; is listed as &lt;em&gt;A Horse with No Name - 2006 Remastered Version&lt;/em&gt; on Spotify but Apple Music doesn’t include that suffix even though they have the exact same version of the album. To fix this, if there are no results returned (again)  then I split the string by non-alphanumeric characters and just try the first part in the lookup. Again, this seems to work in 99% of cases.&lt;/p&gt;

&lt;p&gt;Once I have a track, I take the identifier and send it within a push notification along with the server time before I started making API calls (you’ll see why shortly). I use a silent push notification via the &lt;code&gt;content_available&lt;/code&gt; flag as I want to wake the app up and run some code but not actually display anything to the end user.&lt;/p&gt;

&lt;h3 id=&quot;the-ios-app&quot;&gt;The iOS App&lt;/h3&gt;

&lt;p&gt;The final piece of the puzzle is an iOS app with a fairly minimal interface&lt;sup id=&quot;fnref:switch&quot;&gt;&lt;a href=&quot;#fn:switch&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bendodson.s3.amazonaws.com/weblog/2017/music-sync.jpg&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The key thing for the iOS app to do is to play the track that comes from the push notification. This is fairly easy with an &lt;code&gt;MPMusicPlayerController&lt;/code&gt; but we run into problems when the app is in the background as whilst the app will wake up from the silent push it isn’t allowed to play music.&lt;/p&gt;

&lt;p&gt;That said, we can enable the background audio capability that allows us to control audio from the background but it only works if audio is already playing. To remedy this, I play a 5 minute track from the album “&lt;a href=&quot;https://itun.es/gb/6K_2v&quot;&gt;&lt;em&gt;Silent Tracks of Various Useful Lengths&lt;/em&gt;&lt;/a&gt;” (id #366737838) on repeat so that the app is continuously playing music… it just happens to be silent music&lt;sup id=&quot;fnref:silent&quot;&gt;&lt;a href=&quot;#fn:silent&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Once a silent push is received, it starts to play the track but it also adds the 5 minute silent track to the queue. This is important as it prevents the background audio from terminating should I have a different length of music to Spotify or if a push is delayed due to network reasons. In essence, a normal track will be played followed by a track of silence whilst it waits for the next notification.&lt;/p&gt;

&lt;p&gt;The final issue to solve is one of latency; there is a lot of latency inherent in this setup as we are polling Spotify, sending data to a server, doing one or more lookups against the iTunes API, relying on a push notification, and finally buffering the song in Apple Music! In order to keep us roughly in sync, the app will connect with my server when enabled and fetch the server time so that it can keep time&lt;sup id=&quot;fnref:clock&quot;&gt;&lt;a href=&quot;#fn:clock&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. When the push notification comes in, it contains a timestamp from when the server was first hit by the macOS app and I can then calculate the offset in order to skip into the track a bit.&lt;/p&gt;

&lt;p&gt;For example, lets suppose John starts listening to &lt;em&gt;C’est La Vie&lt;/em&gt; by B*Witched&lt;sup id=&quot;fnref:classic&quot;&gt;&lt;a href=&quot;#fn:classic&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; and his app hits my server at 1485359762 seconds from the unix epoch. This is recorded and sent in the push notification along with ID #298026101. If that process takes 3 seconds, then the iPhone app will know the server time is now 1485359765 and can work out that it needs to skip forward 3 seconds in the song in order to keep me in sync.&lt;/p&gt;

&lt;p&gt;Amazingly, this crazy system actually works and we are able to have our playlist synced and ad free on two completely separate streaming services. I built my portion of the project as an iOS app as Windows does not have access to Apple Music yet I play Rocket League on the PC; in order to actually hear the audio, I wear a single AirPod in my right ear underneath my Turtle Beach X10 Headset so I can hear the music but still get the audio from the game and Skype.&lt;/p&gt;

&lt;p&gt;It was only after we’d got it working that we realised we could have just set up some form of streaming radio server but that likely wouldn’t have been as much fun…&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:criteria&quot;&gt;
      &lt;p&gt;The actual criteria to add songs is simple; I either have to use the phrase “it’s a classic” to be able to describe the song or it has to be “catchy as f**k”. &lt;a href=&quot;#fnref:criteria&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:polling&quot;&gt;
      &lt;p&gt;An improvement would be to hook into some sort of notification so that the app can be told when Spotify changes track rather than polling every second but this works well enough for now. &lt;a href=&quot;#fnref:polling&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:switch&quot;&gt;
      &lt;p&gt;The switch simply activates the app as I’m using various background modes and don’t want my phone to randomly start playing music if John is listening to Spotify whilst we aren’t gaming! &lt;a href=&quot;#fnref:switch&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:silent&quot;&gt;
      &lt;p&gt;I was originally planning on using the track &lt;a href=&quot;https://en.wikipedia.org/wiki/4′33″&quot;&gt;&lt;em&gt;4′33″&lt;/em&gt;&lt;/a&gt; until I found the album of silent audio. &lt;a href=&quot;#fnref:silent&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:clock&quot;&gt;
      &lt;p&gt;Originally I would get the timestamp and then start counting it up with an uptime C method. This had some issues when the device was in standby so I made it simpler and I just work out the offset between the system clock and the server date; then, when I want to know what time it would be on the server, I can just add the offset to the system clock. &lt;a href=&quot;#fnref:clock&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:classic&quot;&gt;
      &lt;p&gt;It’s a classic. &lt;a href=&quot;#fnref:classic&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Some thoughts on Apple's new Alternative Tier A and B pricing strategy for apps</title>
      <link>https://bendodson.com/weblog/2017/01/18/apples-new-app-prices/</link>
      <pubDate>Wed, 18 Jan 2017 10:30:00 +0000</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2017/01/18/apples-new-app-prices/</guid>
      <description>&lt;p&gt;Apple increased their prices for apps in the UK yesterday due to the current changes in the GBP vs USD exchange rate. One of the interesting changes that came with this were two new “alternate tiers” which would allow developers to maintain the previous 79p price point or drop it down to 49p. I was &lt;a href=&quot;http://www.bbc.co.uk/news/technology-38650296&quot;&gt;asked about this by BBC News&lt;/a&gt; and gave this quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t think many publishers will respond to that change. It’s just throwing money away and there’s no reason to give people in the UK a discount. I certainly won’t be discounting my own apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I stick by that today as I don’t see why developers should be penalised for Apple adjusting to economic conditions; it is a change in price that UK users will get used to in the same way they did when the lowest tier changed from 59p to 69p and then again to 79p. This is especially true bearing in mind that the US App Store doesn’t have sales tax included whereas the UK does have VAT (so at current exchange rates a $0.99 app would work out around £0.96).&lt;/p&gt;

&lt;p&gt;The key thing though, and something I didn’t clock onto fully until looking again at the charts today, is that Alternative Price Tier A and B doesn’t apply just to the UK; they change prices in many places such as China, Australia, and Canada but maintain them in other places such as Japan and Denmark. If you went for Tier A you’d be reducing the price of your app by 50% in the UK but reducing it by a whopping 83% in China! There are also a few odd choices such as Canada’s pricing being $1.39 at Tier 1 (which is $0.99 in the USA) but it drops to $0.99 for both the A and B Alternate Tiers.&lt;/p&gt;

&lt;p&gt;If you are a worldwide developer wondering about which tier to choose, I would urge you to stick with the basic Tier 1 pricing. If you choose something like Alternate Tier B to maintain the old price for the UK, you could be dropping prices dramatically in other regions as well. I’m not sure why Apple decided to introduce these tiers but they are not helpful to developers, especially at a time when we should be trying to get away from the bargain basement $0.99 apps that are so prevelant.&lt;/p&gt;

&lt;p&gt;If Apple want to reduce prices further, perhaps they should start by lowering their 30% cut?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sporta 2.0</title>
      <link>https://bendodson.com/weblog/2017/01/10/sporta/</link>
      <pubDate>Tue, 10 Jan 2017 10:00:00 +0000</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2017/01/10/sporta/</guid>
      <description>&lt;p&gt;I’m pleased to announce the release of a new client app I worked on late last year: &lt;a href=&quot;https://itunes.apple.com/gb/app/sporta/id945757003?mt=8&quot;&gt;Sporta&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/apps/sporta.jpg&quot; width=&quot;800&quot; height=&quot;511&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sporta is an app to keep football fans up to date with the latest matches via local notifications in advance of a game. You simply select which teams you are interested in from the Premier League, Sky Bet Championship, The FA Cup, the Scottish Premiership, or international matches featuring England, Scotland, Wales, or Ireland. You can then choose a reminder time prior to the match (from 5 minutes up to 1 week) and the app will automatically send you a local notification to remind you about the match with details of kick off time, the teams involved, and the venue.&lt;/p&gt;

&lt;p&gt;I was originally contacted by the creator to update the existing version of Sporta but I found that the code wasn’t suitable for me to work with due to a combination of out-dated code and offshore developers with poor documentation. Instead, I proposed that re-building the app from scratch with Swift 3 and modern iOS updates (such as AutoLayout to work on all sizes of iPhone and the new permissions systems for notifications introduced in iOS 10) would actually be faster than trying to untangle what was there. I was quickly able to recreate the app and scale it for different iPhone sizes whilst adding an intelligent system for keeping the app constantly up to date; the API for the match updates is called periodically using a combination of Background App Refresh and silent push notifications to ensure that data is always up to date and notifications will always fire at the right time even if the phone happens to be offline&lt;sup id=&quot;fnref:offline&quot;&gt;&lt;a href=&quot;#fn:offline&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Finally, I used the &lt;a href=&quot;http://realm.io&quot;&gt;Realm mobile database&lt;/a&gt; in order to store the match data and be able to quickly execute queries such as “&lt;em&gt;fetch all fixtures that contain teams x, y, and z as either the home or away team&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;This was a really fun project to work on and I’m particularly pleased with how reliable the notifications are. If you are a football fan, you can download &lt;a href=&quot;https://itunes.apple.com/gb/app/sporta/id945757003?mt=8&quot;&gt;Sporta on the App Store&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:offline&quot;&gt;
      &lt;p&gt;The naïve way of doing this would have been to use standard push notifications from a server at the appropriate times but these are not guaranteed to be delivered quickly or at all. Also, you’d need to send data from the phone if you changed your team selection or notification period whereas with the local database system I created you can do that entirely offline and it’ll just work (as I store all upcoming fixtures locally on the device). &lt;a href=&quot;#fnref:offline&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Booktrim for iPhone</title>
      <link>https://bendodson.com/weblog/2016/12/12/booktrim/</link>
      <pubDate>Mon, 12 Dec 2016 10:00:00 +0000</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/12/12/booktrim/</guid>
      <description>&lt;p&gt;I’m very pleased to announce the launch of a recent client app I developed; &lt;a href=&quot;https://itunes.apple.com/gb/app/booktrim-hassle-free-haircuts/id1130340847?mt=8&quot;&gt;Booktrim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/booktrim.jpg&quot; width=&quot;800&quot; height=&quot;574&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.booktrim.com/&quot;&gt;Booktrim&lt;/a&gt; is a hassle-free app that allows customers to quickly browse barbershops, book a haircut, and pay right from their iPhone. I built the app in Swift and made use of AutoLayout to ensure that everything scales beautifully across the various iPhone Sizes and I worked closely with Trim Ventures’ API developer in order to ensure best practices. I was also instrumental in the design of the application and making sure that the user experience was optimised for making quick appointments on the go.&lt;/p&gt;

&lt;p&gt;Once the app was completed, I was asked to build &lt;a href=&quot;https://itunes.apple.com/gb/app/trimbook-update-manage-your/id1175348893?ls=1&amp;amp;mt=8&quot;&gt;TRIMbook&lt;/a&gt;, an app for barbers which allows them to manage their appointments and availability. Once again, the app was built with Swift and I was key in both designing the UI and ensuring the API was being used efficiently. I worked closely with the Trim Ventures team to publish both apps on the App Store and also to run wider beta tests via TestFlight prior to launch.&lt;/p&gt;

&lt;p&gt;This was an interesting project to work on and I think the end product works well. You can &lt;a href=&quot;https://itunes.apple.com/gb/app/booktrim-hassle-free-haircuts/id1130340847?mt=8&quot;&gt;download Booktrim from the App Store&lt;/a&gt; or &lt;a href=&quot;https://www.booktrim.com/&quot;&gt;learn more on their website&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Don't be the idea person</title>
      <link>https://bendodson.com/weblog/2016/11/15/dont-be-the-idea-person/</link>
      <pubDate>Tue, 15 Nov 2016 11:00:00 +0000</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/11/15/dont-be-the-idea-person/</guid>
      <description>&lt;p&gt;I’ve been a fan of &lt;a href=&quot;http://dilbert.com/&quot;&gt;Dilbert&lt;/a&gt; since the mid-‘90s&lt;sup id=&quot;fnref:dilbert&quot;&gt;&lt;a href=&quot;#fn:dilbert&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and this week a lot of my friends (and some clients) sent me this strip from &lt;a href=&quot;http://dilbert.com/strip/2016-11-13&quot;&gt;November 13th&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dilbert.com/strip/2016-11-13&quot;&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/dilbert.jpg&quot; width=&quot;800&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like most things, it’s funny because it’s true. I get several of these types of pitches per week and they never fail to amuse me. I’ve &lt;a href=&quot;/weblog/2015/12/22/ios-developers-dont-work-for-free/&quot;&gt;written about this in detail&lt;/a&gt; previously but I still get people who believe they have the next big idea and that it is worth something.&lt;/p&gt;

&lt;p&gt;Ideas are worth nothing. Absolutely nothing. It is implementation that is worth something.&lt;/p&gt;

&lt;p&gt;The analogy that I always like to use is that of an architect and a builder. Most software developers are builders that take some detailed plans and create to that specification. The “idea person” should be an architect with a clear vision and enough knowledge to know what can and can’t be done. Unfortunately this is rarely the case. Your typical “build my app idea” guy will have no knowledge of what can and can’t be done and therefore no understanding of the time and complexity there is in turning it into a reality. They just assume that they were the first person to think of a life changing idea and that it will be easy money for whoever builds it. It would be like delivering your kids drawing of a house to a builder and expecting them to have it built, for free, by next week&lt;sup id=&quot;fnref:incomplete&quot;&gt;&lt;a href=&quot;#fn:incomplete&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;If you want to be taken seriously, do your research. Speak to developers and find out what is and what isn’t possible as the vast number of ideas I receive just aren’t possible given the constraints of software on iOS&lt;sup id=&quot;fnref:apple&quot;&gt;&lt;a href=&quot;#fn:apple&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Then, once you’ve understood the process, either pay a developer for a basic MVP&lt;sup id=&quot;fnref:mvp&quot;&gt;&lt;a href=&quot;#fn:mvp&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; or pitch to investors to get enough funding to build one.&lt;/p&gt;

&lt;p&gt;Don’t ever be “the idea person” and don’t ever expect other people to work for you for free. The world does not work that way.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:dilbert&quot;&gt;
      &lt;p&gt;I have around 14 compendium books of the strips; my favourite is entitled “&lt;a href=&quot;https://www.amazon.co.uk/Still-Pumped-Using-Mouse-Paperback/dp/B00YDK6RF0/&quot;&gt;Still Pumped From Using The Mouse&lt;/a&gt;” (a reference to a calendar they were making about software developers). &lt;a href=&quot;#fnref:dilbert&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:incomplete&quot;&gt;
      &lt;p&gt;“Oh, and by the way, there is a pool at the back and another floor but I didn’t draw that part” &lt;a href=&quot;#fnref:incomplete&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:apple&quot;&gt;
      &lt;p&gt;“Can you give me the details for Apple then as this should really be installed by default on every phone - it’s a billion dollar idea”. Genuine email I received when I pointed out an idea wasn’t possible. &lt;a href=&quot;#fnref:apple&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mvp&quot;&gt;
      &lt;p&gt;“Minimum Viable Product”, basically a step above a prototype that you can use to gauge interest from consumers and investors. The bare minimum you need to launch. &lt;a href=&quot;#fnref:mvp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Updates to iTunes Artwork Finder</title>
      <link>https://bendodson.com/weblog/2016/11/08/updates-to-itunes-artwork-finder/</link>
      <pubDate>Tue, 08 Nov 2016 14:00:00 +0000</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/11/08/updates-to-itunes-artwork-finder/</guid>
      <description>&lt;p&gt;Last week, my &lt;a href=&quot;https://bendodson.com/projects/itunes-artwork-finder/&quot;&gt;iTunes Artwork Finder&lt;/a&gt; script stopped working due to some &lt;a href=&quot;https://forums.developer.apple.com/message/192916&quot;&gt;changes by Apple&lt;/a&gt; with regards to rate limiting. In the past, searching for something on my site would cause my server to send a request to Apple and get the data back but with so many people using it my server would get blocked within a few seconds.&lt;/p&gt;

&lt;p&gt;After a brief shutdown&lt;sup id=&quot;fnref:thanks&quot;&gt;&lt;a href=&quot;#fn:thanks&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I’m happy to say that my iTunes Artwork Finder is now back up and running again thanks to a few tweaks. Now, instead of sending all requests from my server, it works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When you enter a search term (i.e. “Fall out boy” albums in United Kingdom), that is sent to my server where I’ll generate the correct URL that is needed for Apple’s servers&lt;/li&gt;
  &lt;li&gt;Your browser then takes that URL to make the request directly to Apple&lt;/li&gt;
  &lt;li&gt;When the data is returned from Apple, the browser then sends it to my server for processing&lt;/li&gt;
  &lt;li&gt;Results are then displayed!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means that there are now 3 network requests instead of 1 but the crucial part is that all requests to Apple’s servers are now made from your own browser so the rate limiting shouldn’t be a problem&lt;sup id=&quot;fnref:ratelimit&quot;&gt;&lt;a href=&quot;#fn:ratelimit&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Whilst not an ideal solution, it does work and means I can keep everything running for a bit longer. I’m hopeful that Apple will alter how their rate limiting works as at the moment it seems a bit broken, especially with it being required for several apps with the new &lt;a href=&quot;https://bendodson.com/weblog/2016/02/23/details-on-ios-9-3-media-library-additions/&quot;&gt;Apple Music APIs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code for the artwork finder is &lt;a href=&quot;https://github.com/bendodson/itunes-artwork-finder&quot;&gt;available on GitHub&lt;/a&gt; although this uses the old PHP request system rather than my new version as that should be more than good enough for personal usage&lt;sup id=&quot;fnref:personalusage&quot;&gt;&lt;a href=&quot;#fn:personalusage&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;If you run into any problems, &lt;a href=&quot;https://bendodson.com/contact/&quot;&gt;please get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:thanks&quot;&gt;
      &lt;p&gt;During which I received around 80 emails hoping that it would come back online - thanks! It’s nice to know that so many people use the site; I have no analytics on my website so seeing so many people get in touch made me realise how big it has become. &lt;a href=&quot;#fnref:thanks&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ratelimit&quot;&gt;
      &lt;p&gt;Unless you try and do around 50 searches in short succession in which case you’ll need to wait a bit before you can make more requests. &lt;a href=&quot;#fnref:ratelimit&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:personalusage&quot;&gt;
      &lt;p&gt;And if you want to do more than just personal usage you should &lt;a href=&quot;https://bendodson.com/contact/&quot;&gt;speak to me&lt;/a&gt; first as I don’t really want people to create entire duplicates of my own project. &lt;a href=&quot;#fnref:personalusage&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Vortech</title>
      <link>https://bendodson.com/weblog/2016/10/29/dimensions/</link>
      <pubDate>Sat, 29 Oct 2016 16:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/10/29/dimensions/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update &lt;em&gt;(9th Nov 2016):&lt;/em&gt;&lt;/strong&gt; I’ve updated this article to reflect the new name for the app, Vortech. Whilst submitting a v1.0.1 update (adding support for some extra figures), Apple took issue with the name Dimensions so I had to change it…&lt;/p&gt;

&lt;p&gt;I’m very happy to announce that my latest self-published app, &lt;a href=&quot;https://dodoapps.io/vortech/&quot;&gt;Vortech&lt;/a&gt;, is now &lt;a href=&quot;https://itunes.apple.com/us/app/vortech-ability-tracker-for/id1170285044?ls=1&amp;amp;mt=8&quot;&gt;available on the App Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/dimensions.jpg&quot; width=&quot;800&quot; height=&quot;542&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vortech is a character and ability tracker for the videogame LEGO Dimensions. It allows you to easily see all 52 currently available characters (waves 1-6) and 73 abilities and track them in your own collection. Whilst there are other tracking apps available (namely the official LEGO Dimensions app), these tend not to be as easy to use and they don’t allow you to cross-reference the special abilities and powers of characters.&lt;/p&gt;

&lt;p&gt;I built the app as I would occassionally come across something that required a special ability and the game might show me a character with that ability. However, as I have a fairly large collection already, it is likely I have a character with the ability and just need to look up which one has it. For example, I might find an area in a level which requires the Sonar Smash ability and the game might show me the character Benny (from The LEGO Movie) as someone with this ability; with my app, I can quickly see who else has that abilty and find I have Marty McFly (from Back To The Future) who will do just as well!&lt;/p&gt;

&lt;p&gt;The entire app is built using Swift 3.0 and I use &lt;a href=&quot;http://realm.io&quot;&gt;Realm&lt;/a&gt; as a mobile database containing all of the character information that I scraped from the official LEGO Dimensions website&lt;sup id=&quot;fnref:legoscraper&quot;&gt;&lt;a href=&quot;#fn:legoscraper&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I added a few nice touches such as Peek &amp;amp; Pop support for 3D Touch enabled devices and taptic feedback for the iPhone 7 models. The app is completely free and contains no in-app purchases, adverts, or analytics tracking – it doesn’t even require an internet connection!&lt;/p&gt;

&lt;p&gt;You can download &lt;a href=&quot;https://itunes.apple.com/us/app/vortech-ability-tracker-for/id1170285044?ls=1&amp;amp;mt=8&quot;&gt;Vortech on the App Store&lt;/a&gt; and learn more about it on my &lt;a href=&quot;https://dodoapps.io/vortech/&quot;&gt;Dodo Apps website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find Vortech useful, I’m always grateful for a review on the App Store. If you run into any issues or have feature requests, you can &lt;a href=&quot;https://bendodson.com/contact/&quot;&gt;contact me directly&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:legoscraper&quot;&gt;
      &lt;p&gt;I built a custom scraper using PHP to periodically check the LEGO website and extract the image, abilities, and other information about each character. This then sends me a Slack notification at which point I can regenerate a JSON file and image bundle which I then include within the app. I’d thought about doing push notifications and remote updates for the app but as this is just a free hobby app (and the information only updates every few months) I figured doing it through the App Store will be fine for now. &lt;a href=&quot;#fnref:legoscraper&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Kylo Ben</title>
      <link>https://bendodson.com/weblog/2016/10/27/kylo-ben/</link>
      <pubDate>Thu, 27 Oct 2016 23:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/10/27/kylo-ben/</guid>
      <description>&lt;p&gt;I have three main hobbies; coding, video games, and LEGO. With the first, I’m fortunate to have a flexible job that allows me to code on tons of different and varied projects every day. With the last, I’ve literally run out of space for the models I already have (most of which are over 2000 bricks in size). Video games, then, are really my main hobby. In the last year I’ve &lt;a href=&quot;http://connectingtohost.com/&quot;&gt;started a podcast on co-operative gaming&lt;/a&gt;, built a powerful gaming PC, and spent somewhere in the region of 900 hours playing games. Today I’m happy to announce a new website I’ve been working on dedicated to my gaming hobby; it’s called &lt;a href=&quot;http://kyloben.co.uk&quot;&gt;Kylo Ben&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/kylo-ben.jpg&quot; width=&quot;800&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kylo Ben is divided into several different sections:&lt;/p&gt;

&lt;h3 id=&quot;articles&quot;&gt;Articles&lt;/h3&gt;

&lt;p&gt;I’m currently varying between reviews, things I’m excited about, and general thought pieces on the industry. So far, I have published:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A look ahead at the &lt;a href=&quot;http://kyloben.co.uk/titanfall-2-achievements&quot;&gt;achievements in Titanfall 2&lt;/a&gt; (compared to Titanfall)&lt;/li&gt;
  &lt;li&gt;A review of minimalistic transport sim, &lt;a href=&quot;http://kyloben.co.uk/mini-metro-review&quot;&gt;Mini Metro&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A piece about &lt;a href=&quot;http://kyloben.co.uk/my-first-steam-refund&quot;&gt;my first refund on Steam&lt;/a&gt; in 11 years&lt;/li&gt;
  &lt;li&gt;Some thoughts on the &lt;a href=&quot;http://kyloben.co.uk/thoughts-on-the-nintendo-switch&quot;&gt;Nintendo Switch&lt;/a&gt; announcement&lt;/li&gt;
  &lt;li&gt;A review of the &lt;a href=&quot;http://kyloben.co.uk/lego-dimensions-doctor-who&quot;&gt;Doctor Who LEGO Dimensions level pack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A roundup of the &lt;a href=&quot;http://kyloben.co.uk/humble-monthly-october-2016&quot;&gt;games in the October Humble Bundle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m trying to write new pieces every couple of days and it has proven to be a good way to practice my writing and get some long form thoughts out that don’t fit neatly into a 140 character tweet. It also means I can keep these game centric pieces away from my more work-oriented blog here at &lt;a href=&quot;https://bendodson.com/&quot;&gt;bendodson.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;about&quot;&gt;About&lt;/h3&gt;

&lt;p&gt;I’ve listed a few things about my current gaming setups on my &lt;a href=&quot;http://kyloben.co.uk/about/&quot;&gt;about page&lt;/a&gt;. It details the components in my gaming PC, my current console and mobile gaming systems, and a look through the various consoles I’ve owned since I started gaming in 1991.&lt;/p&gt;

&lt;h3 id=&quot;games&quot;&gt;Games&lt;/h3&gt;

&lt;p&gt;I have a single page which lists all of the games I currently own on both Steam and my Xbox One. Each game has more details including purchase date, last played, total gaming time, and a short note about where I’m currently at with the game. I also list any articles related to that game for easy reference (and vice versa). For example, here is the entry for &lt;a href=&quot;http://kyloben.co.uk/games/mini-metro&quot;&gt;Mini Metro&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gaming-time&quot;&gt;Gaming Time&lt;/h3&gt;

&lt;p&gt;This is perhaps my biggest achievement; a complete log of time spent on each game. The page updates daily and will list each game I’ve played over the last 2 months along with duration and a link through to more details. This is done through a combination of two custom scripts I wrote to scrape both my Steam library and Xbox Live / Windows 10 account periodically for changes. It’s been fascinating for me to see exactly how long I’ve spent on certain games (*cough* &lt;a href=&quot;http://kyloben.co.uk/games/peggle-2&quot;&gt;Peggle 2&lt;/a&gt; *cough*) and will allow me to easily write a regular piece on games I’ve played over the previous month.&lt;/p&gt;

&lt;p&gt;I’m really excited to be writing regularly about my biggest hobby and I’m looking forward to posting frequently for the foreseeable future. I have a few extra things to announce soon including some apps and game mods so &lt;a href=&quot;https://twitter.com/bendodson&quot;&gt;follow me on Twitter&lt;/a&gt; for the latest updates. Alternatively, there is an &lt;a href=&quot;http://kyloben.co.uk/rss.xml&quot;&gt;RSS feed available&lt;/a&gt; for Kylo Ben which will keep you up to date on any new articles. If you have any thoughts or suggestions for improvements, please &lt;a href=&quot;https://bendodson.com/contact&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    
    <item>
      <title>Working Remotely</title>
      <link>https://bendodson.com/weblog/2016/10/12/working-remotely/</link>
      <pubDate>Wed, 12 Oct 2016 14:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/10/12/working-remotely/</guid>
      <description>&lt;p&gt;I was recently asked by &lt;a href=&quot;http://remote.co/&quot;&gt;Remote.co&lt;/a&gt; to take part in a new Q&amp;amp;A section about remote workers. You can &lt;a href=&quot;https://remote.co/remote-workers/ben-dodson/&quot;&gt;read the full Q&amp;amp;A on their website&lt;/a&gt; but I’ve put some of their questions and my answers below:&lt;/p&gt;

&lt;h2 id=&quot;what-advice-would-you-give-someone-considering-going-remote&quot;&gt;What advice would you give someone considering going remote?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Discipline. It takes a lot of discipline to work remotely as you’ll find that it is very easy to put off a piece of work when you’re sitting at home. There are no firewalls stopping you from accessing Facebook and Twitter, the Xbox might be sat saying “just one more game”, and before you know it a month has passed and you’ve done nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-do-you-avoid-becoming-distracted-when-working-remotely&quot;&gt;How do you avoid becoming distracted when working remotely?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;I have a pair of noise-cancelling headphones that I bought for working in an open-plan office but they work at home for me as the act of putting them on puts me into “work mode”. The only problem was that if the doorbell went (sidenote: great advantage of working from home is you never miss an Amazon delivery) I wouldn’t hear it; I fixed that by hooking it up to a Philips Hue lightbulb on my desk so I get a visual alert.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;do-you-have-a-dedicated-home-office&quot;&gt;Do you have a dedicated home office?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;I do have a dedicated room for work. I have a small desk with a 5k iMac and an external 1080p monitor in portrait mode (I find this better for webpages and iPhone simulators). Apart from the computer, my desk only has space for my tea and water and a Blue Yeti microphone I use for podcasting and Skype. I have lots of bookshelves (mainly full of LEGO) and a small orchid by the window.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/office.jpg&quot; width=&quot;800&quot; height=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-the-hardest-part-about-working-with-a-traditional-team-while-youre-remote-how-do-you-overcome-it&quot;&gt;What’s the hardest part about working with a traditional team while you’re remote? How do you overcome it?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;I find the hardest thing is that traditional teams will want to have meetings all the time. They also want you to pop into the office fairly frequently for reasons unknown to me. I’m pretty good at telling prospective clients that I only work remotely and that I don’t do daily catch up calls; I get a good handle for the project and then do a week or two of work before sending over a build for feedback.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    
    <item>
      <title>MailRoute blacklisting via email</title>
      <link>https://bendodson.com/weblog/2016/09/15/mailroute-blacklisting-via-email/</link>
      <pubDate>Thu, 15 Sep 2016 14:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/09/15/mailroute-blacklisting-via-email/</guid>
      <description>&lt;p&gt;I’ve been using &lt;a href=&quot;http://mailroute.net/&quot;&gt;MailRoute&lt;/a&gt; on and off for the past few years&lt;sup id=&quot;fnref:sanebox&quot;&gt;&lt;a href=&quot;#fn:sanebox&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; in an effort to reduce the amount of spam in my inbox but there is one missing feature that always drives me nuts; there is no way to blacklist an email address or domain without going to their website. Whilst you can whitelist domains easily from the daily digest of caught spam, there is no feature that lets you forward spam to them in order to have it blacklisted (despite people, including me, &lt;a href=&quot;https://support.mailroute.net/entries/23555217-Blacklist-by-email&quot;&gt;requesting it since 2013&lt;/a&gt;). After having a look at the &lt;a href=&quot;https://support.mailroute.net/forums/21682281-API&quot;&gt;MailRoute API&lt;/a&gt;, I decided it was time to fix this myself.&lt;/p&gt;

&lt;p&gt;There are several components in getting this working.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I created a new email address with &lt;a href=&quot;http://gmail.com&quot;&gt;Gmail&lt;/a&gt; which will catch my forwarded spam&lt;sup id=&quot;fnref:gmailspam&quot;&gt;&lt;a href=&quot;#fn:gmailspam&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;I set up an account with &lt;a href=&quot;http://context.io&quot;&gt;Context.io&lt;/a&gt; and connected it to the gmail account&lt;sup id=&quot;fnref:gmailaccount&quot;&gt;&lt;a href=&quot;#fn:gmailaccount&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;I put the following code &lt;a href=&quot;https://github.com/bendodson/mailroute-blacklist-with-contextio&quot;&gt;available on GitHub&lt;/a&gt; on a 15 minute CRON job&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;OAuth.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CONTEXT_KEY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;your-contextio-consumer-key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CONTEXT_SECRET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;your-contextio-consumer-secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CONTEXT_USER_ID&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;your-contextio-user-id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CONTEXT_TRASH_NAME&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;[Gmail]/Trash&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change if not using Gmail&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MAILROUTE_USER&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;your-mailroute-username&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// should be your email address&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MAILROUTE_API_KEY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;your-mailroute-api-key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MAILROUTE_EMAIL_ACCOUNT_ID&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;your-mailroute-email-id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// numeric - can be found in admin.mailroute.net network traffic&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$whitelist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sending@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add the email address you are forwarding from or you&amp;#39;ll blacklist yourself...&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$inbox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performOAuthRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://api.context.io/lite/users/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONTEXT_USER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/email_accounts/0/folders/inbox/messages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$inbox&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performOAuthRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://api.context.io/lite/users/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONTEXT_USER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/email_accounts/0/folders/inbox/messages/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bodies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extractEmailAddresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$emails&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$whitelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;performRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://admin.mailroute.net/api/v1/wblist/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;email_account&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/api/v1/email_account/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MAILROUTE_EMAIL_ACCOUNT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;email&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Authorization: ApiKey &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MAILROUTE_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MAILROUTE_API_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;performOAuthRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://api.context.io/lite/users/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONTEXT_USER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/email_accounts/0/folders/inbox/messages/&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;new_folder_id&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CONTEXT_TRASH_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;DONE!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;



&lt;span class=&quot;c1&quot;&gt;// CURL&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performOAuthRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$signatureMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthSignatureMethod_HMAC_SHA1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$oauthConsumer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONTEXT_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CONTEXT_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$oauthRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuthRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from_consumer_and_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$oauthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$oauthRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sign_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$signatureMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$oauthConsumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$oauthRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;curl_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURLOPT_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURLOPT_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURLOPT_HTTPHEADER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURLOPT_CUSTOMREQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$httpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$httpMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;curl_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;curl_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$httpcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;curl_getinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CURLINFO_HTTP_CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;curl_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;c1&quot;&gt;// Email parsing&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extractEmailAddresses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str_replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;preg_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/ /&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter_var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FILTER_VALIDATE_EMAIL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
            &lt;span class=&quot;nv&quot;&gt;$emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;array_unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now all you need to do is forward any spam you receive to the Gmail account you set up. Every 15 minutes, the CRON job will run and check the inbox for any emails. When it finds some, it will parse them for email addresses and blacklist them with MailRoute before deleting them.&lt;/p&gt;

&lt;p&gt;In an ideal world, MailRoute would implement a custom email address for blacklisting but this seems to be working for now.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:sanebox&quot;&gt;
      &lt;p&gt;I stopped using MailRoute a while back and was using the black hole feature of &lt;a href=&quot;http://sanebox.com/&quot;&gt;Sanebox&lt;/a&gt; but I’ve just stopped using them as found the free service &lt;a href=&quot;http://followupthen.com/&quot;&gt;FollowUpThen&lt;/a&gt; - I was getting a lot of spam after the switch off so decided to re-activate MailRoute this week. I use &lt;a href=&quot;http://fastmail.fm&quot;&gt;Fastmail&lt;/a&gt; for my email in case you were wondering. &lt;a href=&quot;#fnref:sanebox&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gmailspam&quot;&gt;
      &lt;p&gt;As you’ll be forwarding emails to Gmail, you’ll want to disable its spam filter as otherwise your emails won’t end up in the inbox for processing by Context. To do this, you’ll need to set up a new rule which matches the email ‘@’ and ensures it never goes to spam. &lt;a href=&quot;#fnref:gmailspam&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gmailaccount&quot;&gt;
      &lt;p&gt;Whilst I could connect Context to my personal email and just move things into a folder for blacklisting, I don’t trust services with access to my email account, certainly not services that are free and are using the data. &lt;a href=&quot;#fnref:gmailaccount&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Pocket Rocket for iOS 10 (now with an iMessage app)</title>
      <link>https://bendodson.com/weblog/2016/09/14/pocket-rocket-for-ios-10-with-imessage-app/</link>
      <pubDate>Wed, 14 Sep 2016 12:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/09/14/pocket-rocket-for-ios-10-with-imessage-app/</guid>
      <description>&lt;p&gt;To coincide with the release of iOS 10, I’m happy to announce a free update is available for my app &lt;a href=&quot;https://itunes.apple.com/us/app/pocket-rocket-quickly-read/id1062699303?ls=1&amp;amp;mt=8&quot;&gt;Pocket Rocket&lt;/a&gt; which includes several new features:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/pocket-rocket-ipad.jpg&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First of all, I’ve added an optional tile-based interface which uses an image from the article or a &lt;a href=&quot;https://bendodson.com/weblog/2016/09/10/generating-random-colour-with-seed-in-swift/&quot;&gt;random colour&lt;/a&gt; if one isn’t available. You can long press a tile to get options for sharing, archiving, and deleting the article and tapping will open the article up in Safari or the in-app browser as per your settings. Next, I added the ability to share articles directly from Pocket Rocket; whether you are using the old list view or the new tile-based one, just long press on an article and you’ll be given a share option which uses the standard iOS share sheet so you can transfer the URL to any compatible app.&lt;/p&gt;

&lt;p&gt;Finally, I added an iOS 10 iMessage app so you can share articles directly within iMessage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/pocket-rocket-imessage.jpg&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was a really interesting feature for me as it let me get to grips with the new APIs that allow apps to hook into iMessage. There are a few interesting niggles for developers when writing these apps&lt;sup id=&quot;fnref:niggles&quot;&gt;&lt;a href=&quot;#fn:niggles&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but on the whole it is fairly simple and includes a lot more power than I thought they would&lt;sup id=&quot;fnref:imessagepower&quot;&gt;&lt;a href=&quot;#fn:imessagepower&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. With Pocket Rocket, you get a list of all of your articles; you can then tap to include them in your message and send them. Once received, you can tap to have the article open up in a webview directly within iMessage.&lt;/p&gt;

&lt;p&gt;I think iMessage apps are going to be a huge deal so I’m excited that Pocket Rocket is one of the first apps available on the iMessage store.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://itunes.apple.com/us/app/pocket-rocket-quickly-read/id1062699303?ls=1&amp;amp;mt=8&quot;&gt;get Pocket Rocket for free on the App Store&lt;/a&gt;. If you have any feature requests or feedback, please &lt;a href=&quot;https://bendodson.com/contact/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:niggles&quot;&gt;
      &lt;p&gt;For example, there is no standard way of seeing when someone tapped a link which is… irritating. Instead you have to work out if a particular message is selected (which happens for a variety of reasons) and then be clever about what you present. &lt;a href=&quot;#fnref:niggles&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:imessagepower&quot;&gt;
      &lt;p&gt;I’ve seen one app that lets you use the camera within iMessage - pretty cool! &lt;a href=&quot;#fnref:imessagepower&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Generating a random colour, with a seed, in Swift 3</title>
      <link>https://bendodson.com/weblog/2016/09/10/generating-random-colour-with-seed-in-swift/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/09/10/generating-random-colour-with-seed-in-swift/</guid>
      <description>&lt;p&gt;I’ve been working on some iOS 10 updates to &lt;a href=&quot;https://dodoapps.io/pocket-rocket/&quot;&gt;Pocket Rocket&lt;/a&gt;&lt;sup id=&quot;fnref:imessageapp&quot;&gt;&lt;a href=&quot;#fn:imessageapp&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; which led me to trying to solve an interesting problem; how do you generate a random colour, with a seed, in Swift? The reason for this dilemma is that I’m going to start showing a grid view of Pocket articles and many of them do not have images associated with them. In order to break things up, I decided I’d like a random colour for the background of each article:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/pocket-rocket-colors.jpg&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As each article is &lt;code&gt;UICollectionViewCell&lt;/code&gt;, setting a random background colour is not suitable as when you scroll and the cells are re-used the backgrounds will change. Whilst that could be fixed fairly easily, I also want the colours to persist with the article between app launches and also be the same in the iPad app and the iMessage extension. This means I need to generate a random colour with a seed so that colours generated with the same seed will always be the same.&lt;/p&gt;

&lt;p&gt;Thankfully this is fairly easy if we use the &lt;code&gt;srand48&lt;/code&gt; and &lt;code&gt;drand48&lt;/code&gt; functions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unicodeScalars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;srand48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drand48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;srand48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drand48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;srand48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drand48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We start by taking a string (in my case an article title) and turning it into an integer by getting the sum of the unicode scalar values of each character. Next, we seed the &lt;code&gt;drand48&lt;/code&gt; function by using &lt;code&gt;srand48&lt;/code&gt; with our Int along with a multiplier or division so that the red, green, and blue values are all different. Finally, we compile the UIColor together.&lt;/p&gt;

&lt;p&gt;I’ve put together a &lt;a href=&quot;https://bendodson.s3.amazonaws.com/RandomColorWithSeed.playground.zip&quot;&gt;Swift Playground demonstrating this&lt;/a&gt; using the last few headlines from &lt;a href=&quot;http://daringfireball.net&quot;&gt;Daring Fireball&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bendodson.s3.amazonaws.com/weblog/2016/random-color-with-seed.jpg&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, each article title results in a different colour; the same string will always result in the same colour being generated. Be aware that this is not collision free as it is just a basic addition of scalar values – a string such as “ben” and “neb” will result in the same colours. This isn’t an issue for my usage and still serves as an interesting way of seeding random colours.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:imessageapp&quot;&gt;
      &lt;p&gt;Specifically an &lt;a href=&quot;https://twitter.com/bendodson/status/774265987231281152&quot;&gt;iMessage app&lt;/a&gt;. &lt;a href=&quot;#fnref:imessageapp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tips for Remote Working</title>
      <link>https://bendodson.com/weblog/2016/08/23/tips-for-remote-working/</link>
      <pubDate>Tue, 23 Aug 2016 14:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/08/23/tips-for-remote-working/</guid>
      <description>&lt;p&gt;I was recently asked by &lt;a href=&quot;http://inc.com/&quot;&gt;Inc.com&lt;/a&gt; to contribute to a feature asking several successful remote workers to share their favourite tips and tools to sustain productivity when working remotely. You can &lt;a href=&quot;http://www.inc.com/stacey-macnaught/successful-remote-workers-share-their-productivity-secrets.html&quot;&gt;read the full article on their website&lt;/a&gt; but I’ve also put their questions and my answers below:&lt;/p&gt;

&lt;h3 id=&quot;how-long-have-you-worked-remotely&quot;&gt;How long have you worked remotely?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Around 6 years&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-does-a-typical-day-look-like-for-you&quot;&gt;What does a typical day look like for you?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ll wake up and go and deal with my dogs first thing around 6.30am whilst getting breakfast ready for my wife. Once she has left, I’ll read and deal with any overnight emails before doing a concentrated burst of work until around 1pm. After lunch, I’ll typically go for a walk and do a bit more work before playing some video games on my PC before my wife gets home. We’ll then walk the dogs, cook some dinner, and generally watch TV. Once she falls asleep, I’ll either do some more work or play some video games depending on how busy my schedule is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;whats-the-one-tip-or-tool-youd-give-to-anyone-looking-to-get-started-remote-working-to-keep-productive&quot;&gt;What’s the one tip or tool you’d give to anyone looking to get started remote working to keep productive?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Develop a schedule and stick to it. The hardest thing in the world is finding the motivation to start on a new project but once you’ve done 10 minutes of work you’ll be raring to go on the next 10 minutes and the next. To work remotely, you need the self-control to work when you don’t want to, the passion in your work to keep going, and the common sense to know when a 30 minute break is going to actually help rather than hinder you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;With regards to tools, I can strongly recommend &lt;a href=&quot;http://cushionapp.com/&quot;&gt;Cushion&lt;/a&gt; as an incredible way of managing your schedule, invoices, and expenses; it’ll make sure you don’t get overbooked (a big no-no) and also help you manage your finances better.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Brapp: Summer Updates</title>
      <link>https://bendodson.com/weblog/2016/08/18/brapp-ui-and-location-updates/</link>
      <pubDate>Thu, 18 Aug 2016 16:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/08/18/brapp-ui-and-location-updates/</guid>
      <description>&lt;p&gt;Over the summer, I’ve continued working with &lt;a href=&quot;https://www.brapp.tv&quot;&gt;Brapp&lt;/a&gt; on &lt;a href=&quot;https://itunes.apple.com/us/app/brapp-rap-sing-or-dance-to/id1022327727?mt=8&quot;&gt;3 big releases&lt;/a&gt; which added several new features and UI updates.&lt;/p&gt;

&lt;h3 id=&quot;v21&quot;&gt;v2.1&lt;/h3&gt;

&lt;p&gt;Released in July, Brapp 2.1 added the ability to trim recorded videos and change vibrancy of video filters along with adding a load of speed and stability improvements. However, the big new feature allowed users to export their beats as a video complete with an animating waveform:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/96MIV-HcByI?list=PLbTRLLbwMtevdMea2cVjGPEopDu7atfl2&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This was a really interesting feature for me to build as I wasn’t sure initially how it would work. It turns out that it is actually fairly easy by adding your animations directly to the various &lt;code&gt;CALayers&lt;/code&gt; and then using an &lt;code&gt;AVVideoCompositionCoreAnimationTool&lt;/code&gt; as your &lt;code&gt;AVMutableVideoComposition&lt;/code&gt; animation tool. Fun stuff!&lt;/p&gt;

&lt;h3 id=&quot;v211&quot;&gt;v2.1.1&lt;/h3&gt;

&lt;p&gt;Released just a few days later, Brapp 2.1.1 included the ability to pin your favourite beat or post to the top of your profile feed&lt;sup id=&quot;fnref:featureby&quot;&gt;&lt;a href=&quot;#fn:featureby&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and added a “Now Playing” bar along the bottom of the app with a similar style to Apple Music. It also introduced synchornicity between the website and app for notifications which is an interesting problem to solve; basically, if someone reads the notifications on the website, a silent push needs to be sent to the app in order to remove the badge icon so you don’t think you have new notifications. There were also some pretty meaty performance upgrades behind the scenes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/brapp-now-playing.jpg&quot; width=&quot;375&quot; height=&quot;90&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;v22&quot;&gt;v2.2&lt;/h3&gt;

&lt;p&gt;Brapp 2.2 was released today with the headline feature of location support. One of my main interests with iOS apps has always been in geo-location so it was really fun for me to add these new features including the ability to tag specific locations to beats and videos, add a city or town to your profile, view beats and videos on a profile map, and search for beats and videos either near you or at a specific location.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/brapp-map.jpg&quot; width=&quot;800&quot; height=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once again, Brapp has been a really fun project to work on. I can’t say enough good things about the people behind it and am looking forward to working with them again in the future. If you haven’t checked it out yet, you can &lt;a href=&quot;https://itunes.apple.com/us/app/brapp-rap-sing-or-dance-to/id1022327727?mt=8&quot;&gt;get Brapp for free on the App Store&lt;/a&gt;. You can also read about the &lt;a href=&quot;https://bendodson.com/weblog/2015/09/25/brapp-the-rap-app/&quot;&gt;initial build and release&lt;/a&gt;, the &lt;a href=&quot;https://bendodson.com/weblog/2015/11/27/brapp-v1.1/&quot;&gt;v1.1 update last November&lt;/a&gt;, and the &lt;a href=&quot;https://bendodson.com/weblog/2016/03/11/brapp-v2/&quot;&gt;v2 update earlier this year&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:featureby&quot;&gt;
      &lt;p&gt;This feature was added by &lt;a href=&quot;http://bangmeansdoit.co.uk/en/&quot;&gt;David Gibson&lt;/a&gt;. &lt;a href=&quot;#fnref:featureby&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Moonlight tvOS for Apple TV 4</title>
      <link>https://bendodson.com/weblog/2016/08/11/moonlight-tvos/</link>
      <pubDate>Thu, 11 Aug 2016 19:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/08/11/moonlight-tvos/</guid>
      <description>&lt;p&gt;A few nights ago I was attempting to finish playing Day of the Tentacle on my PC via a Steam Link in my bedroom. For some reason, whilst it all loaded correctly, it was really jerky to play with a severe delay between controller input and response on the screen. As I’d been playing it successfully using GameStream on my Nvidia Shield, I assumed correctly that the issue was with the Steam Link.&lt;/p&gt;

&lt;p&gt;Not content to have to either a) go downstairs and use the Nvidia Shield or b) go to my office and play in front of my PC, I instead turned to my Apple TV as I knew there was an open source project called &lt;a href=&quot;https://github.com/moonlight-stream/moonlight-ios&quot;&gt;Moonlight&lt;/a&gt; that basically lets you run the GameStream technology on non-Nvidia devices like iPhone or iPad. I assumed there would be a version for Apple TV but unfortunately it turns out that the AVFoundation frameworks have a &lt;code&gt;__TVOS_PROHIBITED&lt;/code&gt; flag on some key components that prevent it from working. That’s when I found a fork by &lt;a href=&quot;https://github.com/kevsmithpublic/moonlight-ios&quot;&gt;kevsmithpublic&lt;/a&gt; that enabled tvOS support with some code changes and requiring you to remove the &lt;code&gt;__TVOS_PROHIBITED&lt;/code&gt; flags from the AVFoundation framework&lt;sup id=&quot;fnref:frameworks&quot;&gt;&lt;a href=&quot;#fn:frameworks&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Unfortunately, I wasn’t able to get it to pair to my PC and after a lot of searching it turns out that the fork was fairly old and hadn’t been updated to the latest specifications for GeForce Experience 3.0 and above.&lt;/p&gt;

&lt;p&gt;Determined not to be beaten, I forked the project and then set about updating the code to support the latest Moonlight connections. This ended up being similar to the point and click adventure I was trying to play as I needed to constantly fetch the Apple TV from my bedroom, connect it to my mac, build the project, unplug the Apple TV, reconnect it in my bedroom, and then test if it actually worked (all because I didn’t have a spare monitor in my office as I use an iMac). After several hours (and a few beers) I had the project working and can now stream my games at 1080p from my PC to my Apple TV 4 and play them using an MFI controller.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/bendodson/moonlight-tvos&quot;&gt;download the project from my GitHub account&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:frameworks&quot;&gt;
      &lt;p&gt;This means it can’t ever be used in an App Store version but it’s pretty cool nonetheless. I had no idea you could alter framework headers to enable things like this. It does beg the question why this framework is prohibited as it all clearly works. &lt;a href=&quot;#fnref:frameworks&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Divide #15 - Virtually Reality</title>
      <link>https://bendodson.com/weblog/2016/08/05/divide-15-virtually-reality/</link>
      <pubDate>Fri, 05 Aug 2016 19:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/08/05/divide-15-virtually-reality/</guid>
      <description>&lt;p&gt;After a short summer break we’re back with &lt;a href=&quot;http://thedivide.co.uk/episodes/15&quot;&gt;episode 15 of The Divide podcast&lt;/a&gt; which is all about virtual reality. John has a fancy new HTC Vive, I’m trying to convince myself I don’t need one, and Chris just wants to be on the bridge with Captain Janeway…&lt;/p&gt;

&lt;p&gt;You can get The Divide from these fine outlets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/gb/podcast/the-divide/id1063410638&quot;&gt;iTunes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://overcast.fm/itunes1063410638/the-divide&quot;&gt;Overcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thedivide.co.uk/shows/itunes.xml&quot;&gt;RSS&lt;/a&gt; (for other podcast readers)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thedivide.co.uk/&quot;&gt;The Divide website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t forget to leave a review on iTunes and follow us on Twitter via &lt;a href=&quot;http://twitter.com/PodcastDivide&quot;&gt;@PodcastDivide&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Media Library privacy flaw fixed in iOS 10</title>
      <link>https://bendodson.com/weblog/2016/08/02/media-library-privacy-flaw-fixed-in-ios-10/</link>
      <pubDate>Tue, 02 Aug 2016 15:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/08/02/media-library-privacy-flaw-fixed-in-ios-10/</guid>
      <description>&lt;p&gt;As I’ve mentioned &lt;a href=&quot;https://bendodson.com/weblog/2016/01/13/your-music-library-is-a-security-and-privacy-risk-on-ios/&quot;&gt;many times before&lt;/a&gt;, iOS had a pretty terrible privacy flaw in that apps didn’t need any permissions in order to read through your media library. This was an issue as it meant you could be fingerprinted easily and tracked across various apps&lt;sup id=&quot;fnref:proof&quot;&gt;&lt;a href=&quot;#fn:proof&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Thankfully, this has now been fixed in iOS 10&lt;sup id=&quot;fnref:fixed&quot;&gt;&lt;a href=&quot;#fn:fixed&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I’ll explain how to update your apps to support this new privacy requirement. Before I do that, I’m going to show you what happens if you run an app built against the iOS 9.3 SDK (or earlier) on iOS 10:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/access-apple-music.jpg&quot; width=&quot;800&quot; height=&quot;450&quot; alt=&quot;[app name] would like to access Apple Music&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll be prompted&lt;sup id=&quot;fnref:permissiontext&quot;&gt;&lt;a href=&quot;#fn:permissiontext&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; to allow permissions as soon as any media library code is encountered be that on app startup or in a background process such as that used by &lt;a href=&quot;https://dodoapps.io/music-tracker/&quot;&gt;Music Tracker&lt;/a&gt;. If you decline to give permission then the app will quit to the home screen and you will not be able to use it. This is a big change from previous permission switches whereby apps built against the old SDK would be exempt from new permissions (i.e. if your iOS 7 SDK compiled app ran on iOS 8, it wouldn’t crash because it wasn’t using the new location privacy options). Personally I like this change as it allows you to see clearly which apps were abusing these APIs such as &lt;a href=&quot;https://twitter.com/rosyna/status/743427770760364034&quot;&gt;Canary&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/chinanderm/status/743091483595546624&quot;&gt;Google Calendar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottom line&lt;/strong&gt;: If you are using &lt;code&gt;MPMediaQuery&lt;/code&gt; or similar in your app, you’d better update it with the iOS 10 SDK as soon as possible as otherwise you are going to get a lot of crashes if your users don’t allow the permission (or a lot of awkward questions if you shouldn’t be using this API).&lt;/p&gt;

&lt;p&gt;How do you update your app to request permission for these APIs? First of all, lets whip up a basic example with Swift 3 that will pull the title of the first track in your music library:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;MPMediaQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: \(item.title)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In keeping with other permissions based APIs such as photos, contacts, and calendars, iOS 10 requires that you add a new key to your Info.plist file to explain why you want to use this permission; for music library access, this key is &lt;code&gt;NSAppleMusicUsageDescription&lt;/code&gt;. If you don’t add this key, your app will crash as soon as you try and access an &lt;code&gt;MPMediaQuery&lt;/code&gt; with the following message:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app’s Info.plist must contain an NSAppleMusicUsageDescription key with a string value explaining to the user how the app uses this data.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the &lt;code&gt;NSAppleMusicUsageDescription&lt;/code&gt; key in place, you will now be given a standard permission dialogue when you first try and access the users media library. If the user chooses “Don’t Allow”, then the media query will fail and any subsequent calls will request in the &lt;code&gt;query.items&lt;/code&gt; property being nil. If they choose “OK”, then nothing happens (as execution of the code is not suspended and there is no callback). To fix this, we need to use the &lt;code&gt;MPMediaLibrary.authorizationStatus()&lt;/code&gt; and &lt;code&gt;requestAuthorization((MPMediaLibraryAuthorizationStatus) -&amp;gt; Void)&lt;/code&gt; APIs that were added in iOS 9.3 to do something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;MPMediaLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestAuthorization&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runMediaLibraryQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;displayMediaLibraryError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runMediaLibraryQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;MPMediaQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;songs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Title: \(item.title)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;displayMediaLibraryError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;MPMediaLibrary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorizationStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;restricted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Media library access restricted by corporate or parental settings&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;denied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Media library access denied by user&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Unknown error&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIAlertController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You first need to request authorization and then run your code only if the status is &lt;code&gt;authorized&lt;/code&gt;. If not, then you should display an error specific to whether or not the request was &lt;code&gt;denied&lt;/code&gt; or &lt;code&gt;restricted&lt;/code&gt; (usually by corporate or parental controls).&lt;/p&gt;

&lt;p&gt;I’ve put an &lt;a href=&quot;https://github.com/bendodson/media-library-access-in-ios-10&quot;&gt;example project on GitHub&lt;/a&gt; which uses the code above by way of demonstration.&lt;/p&gt;

&lt;p&gt;I’m extremely grateful to everyone that has helped share my posts about this issue and to the engineers at Apple for fixing this privacy flaw. I’ll update this post should anything change between now and the expected public release of iOS 10 in September.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:proof&quot;&gt;
      &lt;p&gt;Whilst I had no concrete proof of this at the time of writing those articles, it &lt;a href=&quot;https://twitter.com/rosyna/status/743398363496751104&quot;&gt;looks like I was right that this was a widespread problem&lt;/a&gt;. &lt;a href=&quot;#fnref:proof&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fixed&quot;&gt;
      &lt;p&gt;I don’t want to take all the credit for this but I honestly don’t think this would have been fixed if I hadn’t raised the issue repeatedly over the last 7 months. &lt;a href=&quot;#fnref:fixed&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:permissiontext&quot;&gt;
      &lt;p&gt;In earlier builds of iOS 10 you’d be asked “&lt;em&gt;[App Name] Would Like to Access Apple Music&lt;/em&gt;” (as shown in screenshots above) but as of iOS 10 beta 4 this has been changed to the more appropriate “&lt;em&gt;[App Name] Would Like to Access Apple Music and Your Media Library&lt;/em&gt;”. &lt;a href=&quot;#fnref:permissiontext&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Talking Shop with Ben Dodson</title>
      <link>https://bendodson.com/weblog/2016/07/20/talking-shop-with-ben-dodson/</link>
      <pubDate>Wed, 20 Jul 2016 17:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/07/20/talking-shop-with-ben-dodson/</guid>
      <description>&lt;p&gt;I was recently interviewed by the lovely folks at &lt;a href=&quot;http://cushionapp.com/&quot;&gt;Cushion&lt;/a&gt;&lt;sup id=&quot;fnref:cushion&quot;&gt;&lt;a href=&quot;#fn:cushion&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; as part of their &lt;a href=&quot;http://cushionapp.com/talking-shop/&quot;&gt;Talking Shop series&lt;/a&gt; about my life as a freelancer. You can &lt;a href=&quot;http://cushionapp.com/talking-shop/ben-dodson/&quot;&gt;read the full interview on their website&lt;/a&gt; but I’ve also put their questions and my answers below:&lt;/p&gt;

&lt;h3 id=&quot;how-did-you-get-your-start&quot;&gt;How did you get your start?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I started off strictly as a web developer, moving from agency to agency, not really enjoying what I was doing. At the same time, Apple had just released the iPhone and, shortly afterwards, the App Store. I thought iOS development looked fun, so I quit my job and started teaching myself how to do it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;where-did-your-first-clients-come-from&quot;&gt;Where did your first clients come from?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;I had been freelancing as a web developer on the side for a number of years, so I had a few clients through that. Coincidentally, when I decided to freelance full-time, a friend from Twitter reached out and asked if I would be interested in appearing on The Gadget Show. For the segment the show wanted a freelance developer and a small company to build two separate apps, then see which was more popular. At the time, I had never built an app, so naturally, I said yes. It forced me to learn the ropes pretty quickly! I cobbled this app together and it ended up doing really well, scoring a feature from the App Store. From there, clients just kept coming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-type-of-projects-do-you-work-on-now&quot;&gt;What type of projects do you work on now?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now there’s also the iPad, Apple Watch, Apple TV, so I work on a variety of projects — everything from little apps to find the best steak restaurant nearby to bigger ones for clients like L’Oreal and Glenfiddich.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-does-your-day-to-day-look-like&quot;&gt;What does your day-to-day look like?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;At this point, I try to exclusively work from home. In the beginning, clients would insist on coming to their office. Those days would always be spent in meetings, talking about nothing, and not getting much done. Nowadays, I push for a video call in lieu of all that. I have clients I’ve never even spoken to, that I work with via email or Slack. They’re the best.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-has-been-the-greatest-challenge-of-kind-of-being-a-freelancer&quot;&gt;What has been the greatest challenge of kind of being a freelancer?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;For me, it’s been time management. It’s so easy to procrastinate. Then you hit a deadline and realize that you’ve done nothing, you have to tell the client, but you don’t want to tell the client, so things get worse quickly. The biggest challenge for me was getting to a point where I can switch my work mode on and off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;whats-next-for-you&quot;&gt;What’s next for you?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;A few years ago, I had my own app, an iPhone game called WallaBee. For about three and a half years, I focused on that and was extremely adamant about not hiring anyone else. In retrospect, some help might have made sense, but I was worried about being able to pay someone reliably month to month. It was a lot of fun, but eventually, I burned out and sold it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;ultimately-id-like-to-do-something-like-that-again-but-at-the-moment-i-enjoy-freelancing&quot;&gt;Ultimately, I’d like to do something like that again, but at the moment, I enjoy freelancing.&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s a constant battle between doing things that you want to do, but not earning any money, and doing the things that are less enjoyable, but make money.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;im-sure-that-statement-resonates-with-a-lot-of-freelancers&quot;&gt;I’m sure that statement resonates with a lot of freelancers.&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I was young and single, it was easy to spend twenty hours a day working on my pet project for no pay. The money earned mattered less because at the end of the day, it was just me. But when you have a family with mouths to feed and bills to pay, you find yourself taking less of those risks and opting for projects that provide a bit more security.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-advice-would-you-give-to-someone-just-starting-out&quot;&gt;What advice would you give to someone just starting out?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep it simple. I spent a long time researching and reading up on various how-to-get-things-done philosophies, buying every to-do list manager there was. Now I just have a basic list, make my own invoices, and track everything else in Cushion. If you spend a fortune on loads of tools and to-do lists and all that, you end up spending more time tweaking your setup for productivity than actually being productive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:cushion&quot;&gt;
      &lt;p&gt;If you’re a freelancer, you should definitely check out &lt;a href=&quot;http://cushionapp.com/&quot;&gt;Cushion&lt;/a&gt;. It’s an awesome online tool for keeping track of your clients and scheduling - I’ve been using it for nearly a year and it has helped me avoid overbooking myself. I’m super excited for their invoicing tools which they are launching soon. &lt;a href=&quot;#fnref:cushion&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating passwordless user accounts within iOS apps</title>
      <link>https://bendodson.com/weblog/2016/07/10/passwordless-user-accounts-within-ios-apps/</link>
      <pubDate>Sun, 10 Jul 2016 15:20:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/07/10/passwordless-user-accounts-within-ios-apps/</guid>
      <description>&lt;p&gt;I’m currently in the process of writing an app which will store some information for each user on a server; the stored data should be available to the user on all of their devices. Usually there are two ways of dealing with this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Build a user access system such that the user has to register to use the service. They’ll need to log in to the app (usually with email address and password) on each of their devices.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use CloudKit to store all of the information in an Apple provided database.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first option is overkill for this fairly simple app&lt;sup id=&quot;fnref:overkill&quot;&gt;&lt;a href=&quot;#fn:overkill&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and the second is too restrictive as it means I need to use Apple’s specific data modelling system. However, there is a third way which uses a bit of each of them…&lt;/p&gt;

&lt;p&gt;When a user is logged in to an Apple account on their device&lt;sup id=&quot;fnref:appleaccount&quot;&gt;&lt;a href=&quot;#fn:appleaccount&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, they are automatically signed into the iCloud system. With CloudKit, every app gets its own identifier based on both the CloudKit container and user account which doesn’t change. By retrieving this identifier, you can be 100% sure of the user that is using your app without knowing anything personal about them and without requiring them to manually log into your app.&lt;/p&gt;

&lt;p&gt;To get the identifier, you first need to enable CloudKit within the iCloud section of the Capabilities panel in Xcode (which will require updating your provisioning profile). Then, it is a simple case of importing the CloudKit framework and using the following code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CKContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetchUserRecordIDWithCompletionHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recordID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recordID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recordID&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Error: \(error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Identifier: \(recordID.recordName)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The identifier returned will be 34 characters long and look something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;_e990774f93dd6625b11af6d40fceb310&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have that, you can then send it to your server to match it against whatever content you want to link to this particular user. Now whenever they use your app on any device with the same Apple account, they’ll have access to everything without the need for a manual account creation process and without having to hand over any personal information. The entire process is completely silent and is very secure as the identifier is generated from both the Apple account and your CloudKit container - it can’t be used by other apps nor can it be reverse-engineered to give you personal details of the user.&lt;/p&gt;

&lt;p&gt;I find the code above a bit messy to be used multiple times throughout an application (not to mention the &lt;code&gt;import CloudKit&lt;/code&gt; requirement) and so I’ve wrapped this up in a very basic Swift class that can be called as such:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;AppleCloudIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Error: \(error)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Cloud identifier: \(identifier)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’ve named it &lt;code&gt;AppleCloudIdentifier&lt;/code&gt; and the code is &lt;a href=&quot;https://github.com/bendodson/AppleCloudIdentifier&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:overkill&quot;&gt;
      &lt;p&gt;It’ll also lead to a sharp drop-off in users as people don’t like having to create multiple accounts all over the place. You could implement something like Facebook Login but then you still have an issue in that you are requiring a fair amount of personal information upfront which you probably don’t need. &lt;a href=&quot;#fnref:overkill&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:appleaccount&quot;&gt;
      &lt;p&gt;I’ll hazard a guess that 99.9% of iOS devices are logged into an Apple account. They need to be in order to download apps, send iMessages, create backups, etc, so very unlikely you wouldn’t be. &lt;a href=&quot;#fnref:appleaccount&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Divide #14 - WWDC 2016, 'iTunes with tabs'</title>
      <link>https://bendodson.com/weblog/2016/06/15/divide-14-wwdc-2016-itunes-with-tabs/</link>
      <pubDate>Wed, 15 Jun 2016 10:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/06/15/divide-14-wwdc-2016-itunes-with-tabs/</guid>
      <description>&lt;p&gt;The &lt;a href=&quot;http://thedivide.co.uk/episodes/14&quot;&gt;14th episode of The Divide podcast&lt;/a&gt; is now available in which we take look at the new announcements about watchOS, tvOS, macOS, and iOS in a special episode almost as long as the WWDC keynote itself. We also have a brief chat about the latest news from E3 and Chris gets upset about the Stay Puft Marshmallow Man.&lt;/p&gt;

&lt;p&gt;You can get The Divide from these fine outlets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/gb/podcast/the-divide/id1063410638&quot;&gt;iTunes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://overcast.fm/itunes1063410638/the-divide&quot;&gt;Overcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thedivide.co.uk/shows/itunes.xml&quot;&gt;RSS&lt;/a&gt; (for other podcast readers)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thedivide.co.uk/&quot;&gt;The Divide website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t forget to leave a review on iTunes and follow us on Twitter via &lt;a href=&quot;http://twitter.com/PodcastDivide&quot;&gt;@PodcastDivide&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>iOS 10 Wishlist</title>
      <link>https://bendodson.com/weblog/2016/06/07/ios-10-wishlist/</link>
      <pubDate>Tue, 07 Jun 2016 13:30:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/06/07/ios-10-wishlist/</guid>
      <description>&lt;p&gt;I was recently interviewed by Fast Company for an article they wrote about iOS features they’d like to see at WWDC this year. A couple of my suggestions were &lt;a href=&quot;http://www.fastcompany.com/3060377/wwdc/10-ios-features-wed-love-to-see-apple-announce-at-wwdc&quot;&gt;featured in the article&lt;/a&gt; but I thought I’d publish my full iOS 10 wishlist.&lt;/p&gt;

&lt;h3 id=&quot;system-defaults&quot;&gt;System Defaults&lt;/h3&gt;
&lt;p&gt;One of the things that I feel has been long missing from iOS is the ability to choose a default app for certain tasks such as email, web browser, phone, or notes. I would love to see a way for developers to make their app conform to some set of standards that would allow them to be selected as a default app. For example, Skype could conform to the “phone app” standard so when you tap a phone number in your mail app it’ll launch Skype and dial the number rather than using the Phone app. Similarly, email links could go to Polymail and web links to Chrome.&lt;/p&gt;

&lt;h3 id=&quot;siri-api&quot;&gt;Siri API&lt;/h3&gt;
&lt;p&gt;I’ve long wanted a full API for Siri but so far there hasn’t even been a stepping stone. I imagine the first phase would go hand in hand with the System Defaults plan I outlined and that apps that adopt a certain standard would be able to show up in Siri. For example, if Spotify conformed to being a “music app” then saying “&lt;em&gt;Hey Siri, Play C’est La Via by B*Witched&lt;/em&gt;” would start that track playing in Spotify rather than Music.&lt;/p&gt;

&lt;h3 id=&quot;control-center-buttons&quot;&gt;Control Center Buttons&lt;/h3&gt;
&lt;p&gt;When you swipe up from the bottom of the screen on iOS, you get Control Center which gives you quick access to certain features (like WiFi), controls (for music / video), and apps (Torch, Timer, etc). I’d like the ability to a) use 3D touch to get more options when using the features section (so I can choose a new WiFi network) and b) be able to choose the apps and features that show up in that area. I never need quick access to the calculator.&lt;/p&gt;

&lt;h3 id=&quot;carplay&quot;&gt;CarPlay&lt;/h3&gt;
&lt;p&gt;I’ve been using CarPlay for around a year now (via an after market &lt;a href=&quot;http://www.alpine.co.uk/p/Products/digital-media-receiver-4660/ilx-700&quot;&gt;Alpine iLX-700&lt;/a&gt;) and I absolutely love it. However, 3rd party apps are limited to a few selected audio apps like Spotify and Overcast which use a simple template that doesn’t work very well. I’d like to see support for any 3rd party app to use CarPlay and for it to use UIKit so that any interface can be displayed. &lt;a href=&quot;https://twitter.com/bendodson/status/712573913977524224&quot;&gt;I noticed in March&lt;/a&gt; that iOS 9.3 added a &lt;code&gt;UIUserInterfaceIdiom&lt;/code&gt; for CarPlay so hopefully this is coming.&lt;/p&gt;

&lt;h3 id=&quot;airplay&quot;&gt;AirPlay&lt;/h3&gt;
&lt;p&gt;I have a number of AirPlay devices around the house and one of the things that frustrates me most is that I can’t use Siri to control them. I’d like to be able to say “Hey Siri, play my cooking playlist in the kitchen” and have it just work. I’ve been able to &lt;a href=&quot;https://bendodson.com/weblog/2016/05/24/homekit-and-airplay/&quot;&gt;hack this functionality together&lt;/a&gt; via some Applescript and a fake HomeKit setup on my Mac called Homebridge but it’d be nice to have it built in natively. Also, iTunes on the Mac can AirPlay to multiple speakers at once whereas iOS can’t.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Divide #13 - Consoles</title>
      <link>https://bendodson.com/weblog/2016/05/25/divide-13-consoles/</link>
      <pubDate>Wed, 25 May 2016 10:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/05/25/divide-13-consoles/</guid>
      <description>&lt;p&gt;The &lt;a href=&quot;http://thedivide.co.uk/episodes/13&quot;&gt;13th episode of The Divide podcast&lt;/a&gt; is now available in which we discuss video game consoles from our first tentative steps in the 8-bit era to the almost HD consoles of the modern day. We also discuss the Flic button, Day of the Tentacle, the Nvidia GTX 1080, Stellaris, and our predictions for WWDC.&lt;/p&gt;

&lt;p&gt;You can get The Divide from these fine outlets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/gb/podcast/the-divide/id1063410638&quot;&gt;iTunes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://overcast.fm/itunes1063410638/the-divide&quot;&gt;Overcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thedivide.co.uk/shows/itunes.xml&quot;&gt;RSS&lt;/a&gt; (for other podcast readers)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thedivide.co.uk/&quot;&gt;The Divide website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t forget to leave a review on iTunes and follow us on Twitter via &lt;a href=&quot;http://twitter.com/PodcastDivide&quot;&gt;@PodcastDivide&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HomeKit, AirPlay, and controlling iTunes with Siri</title>
      <link>https://bendodson.com/weblog/2016/05/24/homekit-and-airplay/</link>
      <pubDate>Tue, 24 May 2016 11:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/05/24/homekit-and-airplay/</guid>
      <description>&lt;p&gt;A few days ago I wrote an article about &lt;a href=&quot;https://bendodson.com/weblog/2016/05/18/using-a-button-with-homekit-scenes/&quot;&gt;getting my Flic button to work with HomeKit&lt;/a&gt;. Since then, I’ve had a few requests from people wondering how I was getting iTunes to work with HomeKit such that it could start a playlist on some AirPlay speakers. Today I’ve &lt;a href=&quot;https://www.npmjs.com/~bendodson#packages&quot;&gt;released a couple of HomeBridge plugins to NPM&lt;/a&gt; and I’ll detail how I’ve got my system working.&lt;/p&gt;

&lt;p&gt;First of all, my entire setup is powered by the awesome &lt;a href=&quot;https://github.com/nfarina/homebridge&quot;&gt;Homebridge&lt;/a&gt; system which I’ve written about &lt;a href=&quot;https://www.google.co.uk/#q=site:bendodson.com+homebridge&quot;&gt;at great length&lt;/a&gt;. I found a plugin from &lt;a href=&quot;https://github.com/dansays&quot;&gt;Dan Budiac&lt;/a&gt; called &lt;a href=&quot;https://github.com/dansays/homebridge-applescript&quot;&gt;homebridge-applescript&lt;/a&gt; which allowed you to run a line of applescript via a system of fake switches (so a different script could be called when the switch is turned on and off). This is great for simple one-liners (like “&lt;code&gt;tell application iTunes to pause&lt;/code&gt;”) but I needed something a bit longer for dealing with AirPlay. I &lt;a href=&quot;https://github.com/bendodson/homebridge-applescript&quot;&gt;forked Dan’s project&lt;/a&gt; to create my own Homebridge plugin that would work with a path to an AppleScript file rather than a single line of AppleScript:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;quot;accessory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ApplescriptFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Kitchen Music&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/bendodson/Dropbox/Scripts/kitchenMusic.applescript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/bendodson/Dropbox/Scripts/stopMusic.applescript&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allowed me to then use my existing &lt;a href=&quot;https://bendodson.com/weblog/2016/05/12/airplay-alarm-clock-with-itunes-12/&quot;&gt;alarm clock script&lt;/a&gt; in order to make iTunes connect to my kitchen speakers and play a specific playlist&lt;sup id=&quot;fnref:twoplaylists&quot;&gt;&lt;a href=&quot;#fn:twoplaylists&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; when my “kitchen speakers” switch is turned on and disconnect from AirPlay and pause iTunes when it is turned off.&lt;/p&gt;

&lt;p&gt;This worked well but it has a few problems as the music is coming from a Mac in a different room; there is no way to change the volume, skip a track, or do a basic play / pause toggle&lt;sup id=&quot;fnref:playpause&quot;&gt;&lt;a href=&quot;#fn:playpause&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; without going upstairs to do it manually on iTunes. After thinking about it for a little while, I was able to get the track skipping and play /pause done fairly easily. First of all, I use the following config:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;accessory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ApplescriptFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Music Play Pause Control&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/bendodson/Dropbox/Scripts/playMusic.applescript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/bendodson/Dropbox/Scripts/pauseMusic.applescript&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;accessory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ApplescriptFile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Music Track Control&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/bendodson/Dropbox/Scripts/nextTrack.applescript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/bendodson/Dropbox/Scripts/previousTrack.applescript&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;I won’t detail the AppleScript for each of these as they are fairly basic.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, I used the ‘Scenes’ feature of HomeKit to set up named scenes that related to each toggle. For example, “iTunes next track” is a scene that ensures the “Music Track Control” accessory is turned on whereas “iTunes previous track” ensures that accessory is off. The play / pause controls work in a similar way. Once activated, this meant I could say things like “&lt;em&gt;Hey Siri, iTunes next track&lt;/em&gt;” or “&lt;em&gt;Hey Siri, pause iTunes&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;Whilst scenes can be incredibly useful due to the ability to use any text you want, they can’t be used for something like volume where you want to use a specific amount&lt;sup id=&quot;fnref:volumeamount&quot;&gt;&lt;a href=&quot;#fn:volumeamount&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Unfortunately HomeKit doesn’t have the concept of speakers so there isn’t a way to naturally create an accessory that deals with volume so I improvised and created a fake lightbulb that controlled an AppleScript via the brightness property; &lt;a href=&quot;https://github.com/bendodson/homebridge-applescript-file-lightbulb&quot;&gt;homebridge-applescript-file-lightbulb&lt;/a&gt;&lt;sup id=&quot;fnref:naming&quot;&gt;&lt;a href=&quot;#fn:naming&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;accessory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ApplescriptFileLightbulb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;iTunes volume&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;brightness&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/bendodson/Dropbox/Scripts/volume.applescript&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;volume.applescript&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-applescript&quot; data-lang=&quot;applescript&quot;&gt;&lt;span class=&quot;k&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;argv&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;activate&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;iTunes&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;iTunes&amp;quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;tell&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this in place, I can say “&lt;em&gt;Hey Siri, set iTunes volume to 50%&lt;/em&gt;” and it will work. This is because lightbulbs have a brightness setting and Siri interprets “&lt;em&gt;set [name] to [percentage]&lt;/em&gt;” as being “&lt;em&gt;change the brightness of this device&lt;/em&gt;” just in this case we are hitting an AppleScript with our brightness value.
&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/siri-itunes-volume.jpg&quot; width=&quot;375&quot; height=&quot;375&quot; /&gt;
This has been a fun little exercise in trying to hack HomeKit into what I want to use it for. I’m hopeful that iOS 10 will add native support for HomeKit speakers as then this could be done without reverting to AppleScript and I’d be able to stream from my iPhone via Siri but it’s pretty cool for the time being.&lt;/p&gt;

&lt;p&gt;You can find both of my Homebridge plugins on &lt;a href=&quot;https://www.npmjs.com/~bendodson#packages&quot;&gt;NPM&lt;/a&gt; and &lt;a href=&quot;https://github.com/bendodson/&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:twoplaylists&quot;&gt;
      &lt;p&gt;Actually my own setup has two playlists. I have a playlist for Monday through Saturday with my music but on Sunday my wife gets up first so I have a different playlist for her. The code for that is &lt;code&gt;if weekday of (current date) is Sunday then&lt;/code&gt; &lt;a href=&quot;#fnref:twoplaylists&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:playpause&quot;&gt;
      &lt;p&gt;At first I’d get around this by just using “&lt;em&gt;turn off kitchen music&lt;/em&gt;” followed by “&lt;em&gt;turn on kitchen music&lt;/em&gt;” as the playlist was shuffled but hardly an ideal solution. &lt;a href=&quot;#fnref:playpause&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:volumeamount&quot;&gt;
      &lt;p&gt;I could have done the same as the track control AppleScript and had a “iTunes volume up” and “iTunes volume down” scene to increase or decrease by 10% each time but that would be a pain if you wanted to change the volume by a large amount. &lt;a href=&quot;#fnref:volumeamount&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:naming&quot;&gt;
      &lt;p&gt;I shouldn’t be allowed to name things. &lt;a href=&quot;#fnref:naming&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Great British Bee Count 2016</title>
      <link>https://bendodson.com/weblog/2016/05/19/great-british-bee-count-2016/</link>
      <pubDate>Thu, 19 May 2016 15:00:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/05/19/great-british-bee-count-2016/</guid>
      <description>&lt;p&gt;&lt;a href=&quot;https://bendodson.com/weblog/2015/05/01/great-british-bee-count-app/&quot;&gt;Last year&lt;/a&gt; I worked on rebuilding the &lt;a href=&quot;https://itunes.apple.com/gb/app/great-british-bee-count/id880987608?mt=8&quot;&gt;Great British Bee Count iPhone app&lt;/a&gt; for Friends of the Earth. Today, an updated version of the app has gone live to support this years count which runs from 19th May until 30th June 2016:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bendodson.s3.amazonaws.com/weblog/2016/gbbc-2016.jpg&quot; width=&quot;800&quot; height=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are several updates including a redesigned bee picker, more details of the bees, and a list of plants suitable for attracting bees sponsored by Waitrose. The app is also now universal with support for both the iPhone and iPad&lt;sup id=&quot;fnref:ipaduniversal&quot;&gt;&lt;a href=&quot;#fn:ipaduniversal&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the &lt;a href=&quot;https://itunes.apple.com/gb/app/great-british-bee-count/id880987608?mt=8&quot;&gt;Great British Bee Count on the App Store&lt;/a&gt; (it’s free) or &lt;a href=&quot;http://www.foe.co.uk/page/join-great-british-bee-count-today&quot;&gt;learn more about the bee cause&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ipaduniversal&quot;&gt;
      &lt;p&gt;This came about due to a restriction in the App Store. If you search for an iPhone-only app on the iPad, you have to manually select “iPhone-only” when searching which nobody in their right mind does (as iPhone apps run on iPad just fine in a scaled mode). To make it so that searching “Great British Bee Count” on the iPad App Store would show the app, it had to be a universal app but the client didn’t want to have a custom design for the iPad but continue to use the iPhone scaling. There isn’t an elegant way to do that (as turning on Universal mode will cause AutoLayout to treat the iPad like an iPad) so I solved this by writing a custom view controller that would take the iPhone 4s XIB files and then simply scale them upwards with an affine transform. I also added an extra border on the sides that matches the yellow background to avoid the black boxing that the previous version had. This works great on all iPads (including the iPad Pro) but the text on some items is quite blurry on the non-retina iPad 2 due to a bug within the Apple Frameworks; it’s intelligent enough to use the retina imagery so that images look smooth but not on text apparently. &lt;a href=&quot;#fnref:ipaduniversal&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using a physical button (Flic) with HomeKit scenes and triggers</title>
      <link>https://bendodson.com/weblog/2016/05/18/using-a-button-with-homekit-scenes/</link>
      <pubDate>Wed, 18 May 2016 17:30:00 +0100</pubDate>
      <author>ben@bendodson.com (Ben Dodson)</author>
      <guid>https://bendodson.com/weblog/2016/05/18/using-a-button-with-homekit-scenes/</guid>
      <description>&lt;p&gt;When I started out as a web developer I was fascinated by APIs; the ability to hook into other data sources or update other applications from my own had huge potential that is finally being realised with the Internet of Things&lt;sup id=&quot;fnref:stuff&quot;&gt;&lt;a href=&quot;#fn:stuff&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. It is now possible to write apps that interact with physical objects via such things as &lt;a href=&quot;http://ifttt.com/&quot;&gt;IFTTT&lt;/a&gt; or dedicated APIs for devices like the &lt;a href=&quot;https://meethue.com/&quot;&gt;Philips Hue&lt;/a&gt;. I’ve personally been very interested in the &lt;a href=&quot;http://www.apple.com/uk/ios/homekit/&quot;&gt;HomeKit initiative&lt;/a&gt; from Apple although it hasn’t really taken off yet.&lt;/p&gt;

&lt;p&gt;Whilst I have a lot of internet connected devices, I currently own just a single HomeKit-compatible device; an &lt;a href=&quot;https://www.elgato.com/en/eve/eve-door-window&quot;&gt;Elgato eve door &amp;amp; window&lt;/a&gt; that lets me ask Siri if my back door is currently open&lt;sup id=&quot;fnref:phrasing&quot;&gt;&lt;a href=&quot;#fn:phrasing&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Luckily there is the &lt;a href=&quot;https://github.com/nfarina/homebridge&quot;&gt;Homebridge&lt;/a&gt; project (which I’ve &lt;a href=&quot;https://bendodson.com/weblog/2015/12/01/homekit-christmas-tree-with-siri/&quot;&gt;written about previously&lt;/a&gt;) that allows me to connect all of those together and use them as if they were native HomeKit devices.&lt;/p&gt;

&lt;p&gt;Over the past few months, I’ve been &lt;a href=&quot;https://bendodson.com/weblog/2016/03/23/homekit-wink-and-canary/&quot;&gt;dabbling with HomeKit scenes&lt;/a&gt; so that I can control groups of devices all at once like so:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Good Morning&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Turns on downstairs lights&lt;/li&gt;
    &lt;li&gt;Starts playing my “morning” playlist in kitchen via AirPlay&lt;/li&gt;
    &lt;li&gt;Disables security cameras&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;Good Night&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Turns off all lights (including bedside table lamp)&lt;/li&gt;
    &lt;li&gt;Stops any playing music&lt;/li&gt;
    &lt;li&gt;Enables security cameras&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;This has been working well but I frequently forget to use scenes as many of these things can be controlled in other ways. For example, I might turn off the downstairs lights with my Hue Dimmer Switch and then turn off the bedside table lamp via the Hue today widget which means I forget to activate the security cameras. The eventual solution I’ve come up with is a simple push button (from &lt;a href=&quot;http://flic.io/&quot;&gt;Flic&lt;/a&gt;) stuck under my bedside table that toggles between my &lt;em&gt;Good Morning&lt;/em&gt; and &lt;em&gt;Good Night&lt;/em&gt; scenes. In this article, I’ll tell you how I did it!&lt;/p&gt;

&lt;p&gt;First of all, you are going to need a &lt;a href=&quot;http://flic.io/&quot;&gt;Flic&lt;/a&gt;. I did a lot of research on “smart buttons” and this one was far and away the best&lt;sup id=&quot;fnref:biy&quot;&gt;&lt;a href=&quot;#fn:biy&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. It’s small, has a changeable battery (that lasts 18 months), looks good, and it has an iOS SDK complete with background Bluetooth LE support so you can wake your app up even if it is inactive. The amount of code necessary to support Flic is ridiculously small; you can take a look at &lt;a href=&quot;https://flic.io/partners/developers/ios-tutorial&quot;&gt;their iOS tutorial&lt;/a&gt; to see it in more detail but essentially you will be kicking your user to the Flic app in order to assign a button to the app. Once you’re back, it’s a simple case of activating a singleton and listening for a &lt;code&gt;manager:didReceiveButtonDown&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;With the button tested and working, I set to work on adding HomeKit support to my app. This is relatively straightforward although you do need to create a dedicated provisioning profile in order to add the necessary entitlements to your project. Within a few minutes, I had a toggle in my app that would toggle between my &lt;em&gt;Good Morning&lt;/em&gt; and &lt;em&gt;Good Night&lt;/em&gt; scenes. That was when disaster struck; the HomeKit APIs do not work when your app is not in the foreground&lt;sup id=&quot;fnref:homekitforeground&quot;&gt;&lt;a href=&quot;#fn:homekitforeground&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;This threw me for a little while until I decided that my app would simply have to connect directly to my mac and interface with the Homebridge software that was basically powering everything&lt;sup id=&quot;fnref:rebuild&quot;&gt;&lt;a href=&quot;#fn:rebuild&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. After a quick search, I found &lt;a href=&quot;https://github.com/cflurin/homebridge-websocket&quot;&gt;Homebridge-websocket&lt;/a&gt;, a plugin that basically adds a custom websocket server as a platform to HomeKit. You can create accessories (like a switch) within the websocket server and then you’ll get callbacks when they are turned on and off.&lt;/p&gt;

&lt;p&gt;I planned to make use of this via a HomeKit property known as “triggers”. A trigger is basically a way for HomeKit to monitor a specific device for a specific value (i.e. when a switch is “on”). As soon as it sees that value, it will activate a chosen scene. I set this up by creating two new switches within Homebridge-websocket; &lt;code&gt;ws_morning&lt;/code&gt; and &lt;code&gt;ws_evening&lt;/code&gt;. I then set up two triggers within HomeKit; &lt;code&gt;WebSocket Morning&lt;/code&gt; (which triggers the &lt;em&gt;Good Morning&lt;/em&gt; scene when the &lt;code&gt;ws_morning&lt;/code&gt; switch turns on) and &lt;code&gt;WebSocket Evening&lt;/code&gt; (which triggers the &lt;em&gt;Good Night&lt;/em&gt; scene when the &lt;code&gt;ws_evening&lt;/code&gt; switch turns on). The only change I needed to make to my scenes was to ensure that both &lt;code&gt;ws_morning&lt;/code&gt; and &lt;code&gt;ws_evening&lt;/code&gt; are set to “off” when either is activated; this ensures that I can always turn them from “off” to “on” and thus cause the trigger.&lt;/p&gt;

&lt;p&gt;The final step was to update my iOS app to talk to the websocket server instead of to Homebridge. I found a simple drop-in framework named &lt;a href=&quot;https://github.com/daltoniam/Starscream&quot;&gt;Starscream&lt;/a&gt; which allowed me to connect to the server and send commands which led me to this code for the entire project:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Starscream&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;192.168.1.100:4050&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flicAppKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Your-Flic-App-Key&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flicAppSecret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Your-Flic-App-Secret&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCLFlicButtonDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCLFlicManagerDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSocketDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ws://\(ipAddress)/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;kr&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SCLFlicManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configureWithDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;defaultButtonDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;appID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flicAppKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;appSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flicAppSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;backgroundExecution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setupFlic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SCLFlicManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grabFlicFromFlicAppWithCallbackUrlScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sceneControl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;IBAction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    

    &lt;span class=&quot;c1&quot;&gt;// MARK: Flic Manager&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flicManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCLFlicManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didGrabFlicButton&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCLFlicButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withError&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ERROR: \(error)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flicButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCLFlicButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveButtonDown&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;queued&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    
    &lt;span class=&quot;c1&quot;&gt;// MARK: Websocket Delegate&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocketDidConnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSUserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;standardUserDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;last_status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ws_morning&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ws_evening&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ws_morning&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;topic&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;setValue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;payload&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;characteristic&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;On&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSJSONSerialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataWithJSONObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrettyPrinted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;last_status&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocketDidDisconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocketDidReceiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websocketDidReceiveMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note: this is just a personal project that I built as quickly as possible. By nature, it is a fairly dirty hack. You shouldn’t write professional apps like this.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this code in place, I can now press my Flic button (stuck to the underside of my bedside table) and it will toggle between my &lt;em&gt;Good Morning&lt;/em&gt; and &lt;em&gt;Good Night&lt;/em&gt; scenes. This is the full process of what is going on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Press the Flic button&lt;/li&gt;
  &lt;li&gt;Wakes up the iOS app (if terminated or backgrounded) and hits the &lt;code&gt;toggle&lt;/code&gt; function&lt;/li&gt;
  &lt;li&gt;App sends a websocket command to the Homebridge-websocket server&lt;/li&gt;
  &lt;li&gt;Server turns on a fake switch&lt;/li&gt;
  &lt;li&gt;HomeKit notices that the fake switch has been turned on so fires trigger to run appropriate scene&lt;/li&gt;
  &lt;li&gt;Scene activates or deactivates various accessories and then switches the fake switch back off ensuring it is ready for next button press&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a long way away from the process I’d envisioned (press button, wake up app, toggle scene with HomeKit API) but it has been a fun challenge finding a way to get it work. I now have a physical button that controls multiple aspects of my home with a single press - it’s pretty cool!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:stuff&quot;&gt;
      &lt;p&gt;Ugh what a horrible expression. I renamed it the &lt;em&gt;Internet of Stuff&lt;/em&gt; on &lt;a href=&quot;https://bendodson.com/weblog/2016/01/27/divide-7-mind-missiles-internet-of-stuff/&quot;&gt;episode 7 of The Divide&lt;/a&gt;. &lt;a href=&quot;#fnref:stuff&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:phrasing&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://bendodson.s3.amazonaws.com/phrasing.png&quot;&gt;&lt;em&gt;Phrasing&lt;/em&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:phrasing&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:biy&quot;&gt;
      &lt;p&gt;“Why not just build your own with a Raspberry Pi or similar?”. Because I can’t be bothered; the cost of my time to do that is more than the cost of buying an incredibly well put together button that already does exactly what I want. &lt;a href=&quot;#fnref:biy&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:homekitforeground&quot;&gt;
      &lt;p&gt;Probably for a very good reason, you likely don’t want an app reading information about or controlling your HomeKit devices when you aren’t literally using the app. It’s a bit of a pain though for a simple app like this. I did manage to find a &lt;code&gt;com.apple.developer.homekit.background-mode&lt;/code&gt; entitlement but there is no way to generate a provisioning profile that uses it. Maybe Apple will add this in a future version of iOS but I wouldn’t count on it. &lt;a href=&quot;#fnref:homekitforeground&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rebuild&quot;&gt;
      &lt;p&gt;Technically, as all of my devices have their own APIs I could have just built my app to directly talk to Hue, Canary, iTunes, etc and rebuild my scenes that way. That idea didn’t sit well with me though as it’d be a lot more work and effectively duplicating what I already have. Similarly, I could have just used the native IFTTT support with the Flic to turn on or off some of my devices but that would add more latency and I don’t want to trust my connected home to something that has to be connected online; the beauty of HomeKit is that it works locally. &lt;a href=&quot;#fnref:rebuild&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    

  </channel> 
</rss>